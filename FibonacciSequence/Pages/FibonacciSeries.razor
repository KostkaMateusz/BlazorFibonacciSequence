@page "/"
@using System.Numerics;
@using FibonacciSeriesCalculator;
@using System.ComponentModel.DataAnnotations

<PageTitle>Fibonacci Sequence</PageTitle>

<h3><em>Provide size of Fibonacci Sequence</em></h3>

<div class="form-group">
    <EditForm Model="@Model" OnValidSubmit="@OnClick">
    <DataAnnotationsValidator />
    <InputNumber class="form-control" @bind-Value="Model!.FibonaciMaxElement" placeholder="Enter a Non-Negative Integer (Max:10000)" />
    <ValidationMessage For="() => Model!.FibonaciMaxElement" />
    <button class="btn btn-primary btn-lg btn-block" type="submit">Generate Fibonacci Sequence</button>
</EditForm>
</div>

<h4>@IsCalculating</h4>

@if (IsCalculating)
{    
    <div class="spinner"></div>
}


@if (fibonaciSeries is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>LP.</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
    @foreach (var fibonaci in fibonaciSeries)
    {
            <tr>
                <td>@fibonaci.Item1</td>
                <td>@fibonaci.Item2</td>
            </tr>
    }
        </tbody>
    </table>
}


@code {
    [SupplyParameterFromForm]
    public FibonaciFormParameters? Model { get; set; } = new();


    private IList<(ulong, BigInteger)>? fibonaciSeries = null ;


    public bool IsCalculating { get; set; }= false;

    private async Task OnClick()
    {       
        IsCalculating = true;

        await Task.Delay(1);

        GetFibonaci();    
    }

    private void GetFibonaci()
    {
        fibonaciSeries = new List<(ulong, BigInteger)>();

        foreach (var fibonaciSequencePair in FibbonaciCalculator.FibonacciIterative((uint)Model!.FibonaciMaxElement))
        {
            fibonaciSeries.Add(fibonaciSequencePair);
        }
        IsCalculating = false;

        return;
    }

    public class FibonaciFormParameters
    {        
        [Range(0, 10000, ErrorMessage = "Value must be between 0 and 10000.")]
        public int? FibonaciMaxElement { get; set; }
    }
}
