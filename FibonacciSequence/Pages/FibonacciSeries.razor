@page "/"
@using System.Numerics;
@using FibonacciSeriesCalculator;
@using System.ComponentModel.DataAnnotations

<PageTitle>FibonacciSeries</PageTitle>

<h3>FibonacciSeries</h3>


<EditForm Model="@Model" OnValidSubmit="@GetFibonaci">
    <DataAnnotationsValidator />    
    <InputNumber @bind-Value="Model!.FibonaciMaxElement" />
    <ValidationMessage For="() => Model!.FibonaciMaxElement" />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@if(fibonaciSeries is null)
{
    <p><em>Provide size of Fibonacci Series...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>LP.</th>
                <th>Value</th>
            </tr>
        </thead>
    <tbody>
    @foreach (var fibonaci in fibonaciSeries)
    {
        <tr>
            <td>@fibonaci.Item1</td>
            <td>@fibonaci.Item2</td>
        </tr>
    }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    public FibonaciFormParameters? Model { get; set; } = new();

    // protected override void OnInitialized() => Model ??= new();

    private IList<(ulong, BigInteger)>? fibonaciSeries = null ;

    private void GetFibonaci()
    {
        uint sequenceSize = (uint)Model!.FibonaciMaxElement;

        fibonaciSeries = new List<(ulong, BigInteger)>();
        foreach (var fibonaciSequencePair in FibbonaciCalculator.FibonacciIterative(sequenceSize))
        {
            fibonaciSeries.Add(fibonaciSequencePair);
            StateHasChanged();
        }
    }

    public class FibonaciFormParameters
    {
        [Required]
        [Range(0, 5000, ErrorMessage = "Value must be between 0 and 5000.")]
        public int FibonaciMaxElement { get; set; }
    }
}
