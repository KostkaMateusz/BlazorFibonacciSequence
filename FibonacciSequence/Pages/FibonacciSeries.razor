@page "/"
@using System.Numerics;
@using FibonacciSeriesCalculator;
@using System.ComponentModel.DataAnnotations

<PageTitle>Fibonacci Sequence</PageTitle>

<h3 class="text-center"><em>Provide size of Fibonacci Sequence</em></h3>

<div class="form-group text-center">
<EditForm Model="@Model" OnValidSubmit="@GetFibonaci">
    <DataAnnotationsValidator />
    <InputNumber class="form-control" @bind-Value="Model!.FibonaciMaxElement" placeholder="Enter a Non-Negative Integer (Max:5000)" />
    <ValidationMessage For="() => Model!.FibonaciMaxElement" />
    <button class="btn btn-primary btn-lg btn-block" type="submit">Generate Fibonacci Sequence</button>
</EditForm>
</div>

@if (fibonaciSeries is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>LP.</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
    @foreach (var fibonaci in fibonaciSeries)
    {
            <tr>
                <td>@fibonaci.Item1</td>
                <td>@fibonaci.Item2</td>
            </tr>
    }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    public FibonaciFormParameters? Model { get; set; } = new();
    
    private IList<(ulong, BigInteger)>? fibonaciSeries = null ;

    private void GetFibonaci()
    {
        fibonaciSeries = new List<(ulong, BigInteger)>();
        foreach (var fibonaciSequencePair in FibbonaciCalculator.FibonacciIterative((uint)Model!.FibonaciMaxElement))
        {
            fibonaciSeries.Add(fibonaciSequencePair);
            StateHasChanged();
        }
    }

    public class FibonaciFormParameters
    {        
        [Range(0, 5000, ErrorMessage = "Value must be between 0 and 5000.")]
        public int? FibonaciMaxElement { get; set; }
    }
}
