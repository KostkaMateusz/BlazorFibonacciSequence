@page "/"
@using System.Numerics;
@using FibonacciSeriesCalculator;
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics

<PageTitle>Fibonacci Sequence</PageTitle>

<h4><em>Provide size of Fibonacci Sequence</em></h4>

<div class="form-group">
    <EditForm Model="@Model" OnValidSubmit="@OnClick">
    <DataAnnotationsValidator />
    <InputNumber class="form-control" @bind-Value="Model!.FibonaciMaxElement" placeholder="Enter a Non-Negative Integer (Max:15000)" />
    <ValidationMessage For="() => Model!.FibonaciMaxElement" />
    <button class="btn btn-primary btn-lg btn-block" type="submit">Generate Fibonacci Sequence</button>
</EditForm>
</div>


<h5>Calculation Time: @calculationTime.ElapsedTime seconds</h5>


@if (IsCalculating)
{    
    <div class="spinner"></div>
}

@if (fibonaciSeries is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Nº</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
    @foreach (var fibonaci in fibonaciSeries)
    {
            <tr>
                <td>@fibonaci.Item1</td>
                <td>@fibonaci.Item2</td>
            </tr>
    }
        </tbody>
    </table>
}


@code {
    [SupplyParameterFromForm]
    public FibonaciFormParameters? Model { get; set; } = new();

    private IList<(ulong, BigInteger)>? fibonaciSeries = null ;

    public bool IsCalculating { get; set; } = false;

    private CalculationTime calculationTime = new();

    private string? elapsedTime;

    private async Task OnClick()
    {   
        calculationTime.StartTimer();

        IsCalculating = true;

        await Task.Delay(2);

        GetFibonaci();

        IsCalculating = false;

        calculationTime.StopTimer();        
    }

    private void GetFibonaci()
    {
        fibonaciSeries = new List<(ulong, BigInteger)>();

        foreach (var fibonaciSequencePair in FibbonaciCalculator.FibonacciIterative((uint)Model!.FibonaciMaxElement))
        {
            fibonaciSeries.Add(fibonaciSequencePair);
        }

        return;
    }

    public sealed class FibonaciFormParameters
    {        
        [Range(0, 15000, ErrorMessage = "Value must be between 0 and 15000.")]
        public int? FibonaciMaxElement { get; set; }
    }

    public sealed class CalculationTime
    {
        private Stopwatch stopWatch = new();

        public string ElapsedTime
        {
            get
            {
                // Get the elapsed time as a TimeSpan value.
                TimeSpan ts = this.stopWatch.Elapsed;

                // Format and display the TimeSpan value.                
                return String.Format("{0:00}.{1:00}", ts.Seconds, ts.Milliseconds / 10); ;
            }
        } 

        public void StartTimer() 
        {            
            ResetTimer();
            this.stopWatch.Start();        
        }
        public void StopTimer() => this.stopWatch.Stop();        
        private void ResetTimer() => this.stopWatch.Reset();
    }
}
